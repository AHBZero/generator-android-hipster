apply plugin: 'com.android.application'
<% if (language == 'kotlin') { %>apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'<% } %>
<% if (language == 'java') { %>apply plugin: "me.tatarka.retrolambda"
apply plugin: "com.neenbedankt.android-apt"
apply from: '../config/quality/quality.gradle'<% } %>

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId '<%= appPackage %>'
        minSdkVersion <%= androidMinSdkVersion %>
        targetSdkVersion <%= androidTargetSdkVersion %>

        multiDexEnabled true

        versionCode 1
        versionName "0.0.1"

    }

    signingConfigs {
        app {
            storeFile file('<%= appPackage %>.keystore')
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }

    buildTypes {

        applicationVariants.all { variant ->
            if (variant.getBuildType().isMinifyEnabled()) {
                variant.assemble.doLast {
                    copy {
                        from variant.mappingFile
                        into "${rootDir}/proguardTools"
                        rename { String fileName ->
                            "mapping-${variant.name}.txt"
                        }
                    }
                }
            }
        }

        all {
            buildConfigField 'String', 'API_ENDPOINT_LOCAL', "\"http://example.com\""
            buildConfigField 'String', 'API_ENDPOINT_INTERNAL', "\"http://example.com\""
            buildConfigField 'String', 'API_ENDPOINT_STAGING', "\"http://example.com\""
            buildConfigField 'String', 'API_ENDPOINT_PRODUCTION', "\"http://example.com\""
        }
        debug {
          def host = InetAddress.getLocalHost().getCanonicalHostName()
          buildConfigField "String", "LOCAL_IP", '\"' + host + '\"'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            apply plugin: "signing"

            shrinkResources true
            minifyEnabled true

            signingConfig signingConfigs.app

        }
    }

    <% if (language == 'kotlin') { %>sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }<% } %>

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/notice'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/license'
    }

    dexOptions {
        preDexLibraries true
        incremental true
        javaMaxHeapSize "4g"
    }

    productFlavors {
        internal {
            applicationId '<%= appPackage %>.internal'
        }
        production {
            applicationId '<%= appPackage %>'
        }
    }
    <% if (language == 'java') { %>
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    <% } %>
    lintOptions {
        disable "InvalidPackage"
    }

}
<% if (language == 'kotlin') { %>
kapt {
    generateStubs = true
}<% } %>
<% if (language == 'java') { %>
apt {
    arguments {
    }
}
retrolambda {
    jvmArgs "-noverify"
}
<% } %>

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // android-hipster-needle-gradle-dependency

}

<% if (language == 'kotlin') { %>buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // android-hipster-needle-gradle-parent-dependency
    }
}<% } %>
